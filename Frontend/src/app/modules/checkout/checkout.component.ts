import { AuthService } from '../../core/services/auth.service'; // ‚úÖ Importar AuthService
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { FormsModule } from '@angular/forms'; // ‚úÖ Importar FormsModule para [(ngModel)]
import { ShoppingCartService } from '../../core/services/shoppingCart.service';
import { CartItem } from '../../core/models/cartItem.model';
import { LOCATIONS } from './locations'
import { OrderService } from '../../core/services/order.service';
import { Order } from '../../core/models/order.model';
import { OrderDetail } from '../../core/models/orderDetail.model';

@Component({
  selector: 'app-checkout',
  standalone: true,
  imports: [CommonModule, FormsModule], // ‚úÖ Asegurar FormsModule para [(ngModel)]
  templateUrl: './checkout.component.html',
})
export class CheckoutComponent implements OnInit {

  constructor(
    private router: Router,
    private shoppingCartService: ShoppingCartService,
    private orderService: OrderService, // ‚úÖ Agregado para poder enviar la orden
    private authService: AuthService // ‚úÖ Inyectar AuthService
  ) {}

  currentStep: number = 1; // üîπ Inicia en el paso 1
  enviarADireccionDiferente: boolean = false;
  cartItems: CartItem[] = [];
  total: number = 0;
  isSubmitting = false;

  // Datos del formulario de facturaci√≥n
  billingData = {
    nombre: '',
    apellidos: '',
    tipoIdentificacion: '',
    numeroIdentificacion: '',
    direccion: '',
    direccionDetalle: '',
    pais: '',
    departamento: '',
    ciudad: '',
    codigoPostal: '',
    telefono: '',
    email: ''
  };

  // Datos de la direcci√≥n de env√≠o (si es diferente)
  shippingData = {
    nombre: '',
    apellidos: '',
    direccion: '',
    direccionDetalle: '',
    pais: '',
    departamento: '',
    ciudad: '',
    codigoPostal: '',
    notas: ''
  };

  orderData = {
    cupon: '', // C√≥digo de cup√≥n (si aplica)
    metodoEnvio: '', // M√©todo de env√≠o seleccionado
    metodoPago: '', // M√©todo de pago seleccionado
    aceptoTerminos: true, // Confirmaci√≥n de t√©rminos y condiciones
  };

  paises = Object.keys(LOCATIONS); // Lista de pa√≠ses
  regiones: string[] = []; // Lista de regiones seg√∫n pa√≠s seleccionado
  ciudades: string[] = []; // Lista de ciudades seg√∫n regi√≥n seleccionada
  regionesEnvio: string[] = [];
  ciudadesEnvio: string[] = [];

  onCountryChange(tipo: 'billing' | 'shipping'): void {
    const paisSeleccionado = tipo === 'billing' ? this.billingData.pais : this.shippingData.pais;

    if (tipo === 'billing') {
      this.regiones = paisSeleccionado ? Object.keys(LOCATIONS[paisSeleccionado].regiones) : [];
      this.billingData.departamento = "";
      this.ciudades = [];
    } else {
      this.regionesEnvio = paisSeleccionado ? Object.keys(LOCATIONS[paisSeleccionado].regiones) : [];
      this.shippingData.departamento = "";
      this.ciudadesEnvio = [];
    }
  }

  onRegionChange(tipo: 'billing' | 'shipping'): void {
    const paisSeleccionado = tipo === 'billing' ? this.billingData.pais : this.shippingData.pais;
    const regionSeleccionada = tipo === 'billing' ? this.billingData.departamento : this.shippingData.departamento;

    if (tipo === 'billing') {
      this.ciudades = regionSeleccionada ? LOCATIONS[paisSeleccionado].regiones[regionSeleccionada] : [];
      this.billingData.ciudad = "";
    } else {
      this.ciudadesEnvio = regionSeleccionada ? LOCATIONS[paisSeleccionado].regiones[regionSeleccionada] : [];
      this.shippingData.ciudad = "";
    }
  }



  ngOnInit(): void {
    this.loadCartItems();
  }

  loadCartItems(): void {
    this.shoppingCartService.cartItems$.subscribe(items => {
      this.cartItems = items;
      this.total = this.calculateTotal();
    });
  }

  calculateTotal(): number {
    return this.cartItems.reduce((sum, item) => sum + item.product.price * item.quantity, 0);
  }

  nextStep(): void {
    console.log('Intentando avanzar al siguiente paso... Paso actual:', this.currentStep);

    if (this.validateStep(this.currentStep)) {
      this.currentStep++;
      console.log('Nuevo paso:', this.currentStep);
    } else {
      console.log('‚ùå No se pudo avanzar, datos incompletos.');
    }
  }


  prevStep(): void {
    if (this.currentStep > 1) {
      this.currentStep--;
    }
  }

  validateStep(step: number): boolean {
    console.log('Validando paso:', step);

    switch (step) {
      case 1: // üîπ Validaci√≥n de Datos de Facturaci√≥n
        const isValidBilling = this.billingData.nombre.trim() !== '' &&
          this.billingData.apellidos.trim() !== '' &&
          this.billingData.tipoIdentificacion.trim() !== '' &&
          this.billingData.numeroIdentificacion.trim() !== '' &&
          this.billingData.direccion.trim() !== '' &&
          this.billingData.direccionDetalle.trim() !== '' &&
          this.billingData.pais.trim() !== '' &&
          this.billingData.departamento.trim() !== '' &&
          this.billingData.ciudad.trim() !== '' &&
          this.billingData.telefono.trim() !== '' &&
          this.billingData.email.trim() !== '';

        console.log('¬øPaso 1 v√°lido?', isValidBilling);
        return isValidBilling;

      case 2: // üîπ Validaci√≥n de Direcci√≥n de Env√≠o (si aplica)
        if (this.enviarADireccionDiferente) {
          const isValidShipping = this.shippingData.nombre.trim() !== '' &&
            this.shippingData.apellidos.trim() !== '' &&
            this.shippingData.direccion.trim() !== '' &&
            this.shippingData.direccionDetalle.trim() !== '' && // Se agreg√≥ el detalle de la direcci√≥n
            this.shippingData.pais.trim() !== '' &&
            this.shippingData.departamento.trim() !== '' &&
            this.shippingData.ciudad.trim() !== '' &&
            this.shippingData.codigoPostal.trim() !== ''; // Se agreg√≥ el c√≥digo postal

          console.log('¬øPaso 2 v√°lido?', isValidShipping);
          return isValidShipping;
        }
        return true;

      case 3: // üîπ Validaci√≥n de M√©todo de Pago y T√©rminos
        const isValidPayment = this.orderData.metodoPago.trim() !== '' &&
          this.orderData.metodoEnvio.trim() !== '' &&
          this.orderData.aceptoTerminos; // Se verifica que haya aceptado los t√©rminos

        console.log('¬øPaso 3 v√°lido?', isValidPayment);
        return isValidPayment;

      default:
        return true;
    }
  }

  toggleShippingAddress(): void {
    console.log('Estado de env√≠o diferente:', this.enviarADireccionDiferente);
  }

  goBackToCart(): void {
    this.router.navigate(['/cart']);
  }

  onSubmit(): void {
    if (this.isSubmitting) return; // Evita que se ejecute otra vez
    this.isSubmitting = true; // Desactiva el bot√≥n

    if (this.validateStep(3)) {
        const orderDetails: OrderDetail[] = this.cartItems.map(item => ({
            id: 0, orderId: 0, productId: item.product.id,
            productName: item.product.name, quantity: item.quantity,
            unitPrice: item.product.price, subtotal: item.quantity * item.product.price
        }));

        const user = this.authService.getUser(); // üîπ Obtiene el usuario autenticado
        if (!user) {
          console.error("‚ùå No hay usuario autenticado");
          alert("Error: Usuario no autenticado.");
          this.isSubmitting = false;
          return;
        }

        const orderData: Order = {
          id: 0,
          userId: user.id,
          orderDetails,
          total: this.total,
          paymentMethod: this.orderData.metodoPago,
          pickupLocation: this.orderData.metodoEnvio?.toLowerCase() === 'recoger_tienda'
          ? 'Bogot√°, Carrera 27a #63g-46'
          : null,
          status: 'PENDING',
          createdAt: new Date().toISOString(),
          acceptedTerms: this.orderData.aceptoTerminos,

          // ‚úÖ Facturaci√≥n agrupada
          billingData: this.billingData ? {
            firstName: this.billingData.nombre,
            lastName: this.billingData.apellidos,
            idType: this.billingData.tipoIdentificacion,
            idNumber: this.billingData.numeroIdentificacion,
            address: this.billingData.direccion,
            addressDetail: this.billingData.direccionDetalle,
            country: this.billingData.pais,
            region: this.billingData.departamento,
            city: this.billingData.ciudad,
            postalCode: this.billingData.codigoPostal,
            phone: this.billingData.telefono,
            email: this.billingData.email
          } : null,

          // ‚úÖ Env√≠o agrupado
          shippingData: this.shippingData ? {
            firstName: this.shippingData.nombre,
            lastName: this.shippingData.apellidos,
            address: this.shippingData.direccion,
            addressDetail: this.shippingData.direccionDetalle,
            country: this.shippingData.pais,
            region: this.shippingData.departamento,
            city: this.shippingData.ciudad,
            postalCode: this.shippingData.codigoPostal,
            notes: this.shippingData.notas
          } : null,

          // ‚úÖ Cup√≥n y m√©todo de env√≠o
          couponCode: this.orderData.cupon || null,
          shippingMethod: this.orderData.metodoEnvio || null
        };

        console.log('üì§ Enviando orden al backend:', orderData);

        this.orderService.createOrder(orderData)
        .subscribe({
            next: (response) => {
                console.log('‚úÖ Pedido guardado con √©xito:', response);
                alert('¬°Pedido realizado con √©xito!');
                this.shoppingCartService.clearCart(); // ‚úÖ Vac√≠a el carrito
                this.router.navigate(['/order-confirmation']);
                this.isSubmitting = false; // Habilita el bot√≥n para futuros pedidos
            },
            error: (error) => {
                console.error('‚ùå Error al guardar el pedido:', error);
                alert('Hubo un error al procesar tu pedido.');
                this.isSubmitting = false; // Rehabilita el bot√≥n en caso de error
            }
        });
    } else {
        console.log('‚ùå Falta informaci√≥n en el pedido.');
        this.isSubmitting = false; // Habilita el bot√≥n si la validaci√≥n falla
    }
}

}
